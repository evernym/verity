.test:
  cache:
    paths:
      - $CI_PROJECT_DIR/.sbt/
      - $CI_PROJECT_DIR/.ivy2/
  stage: test
  before_script:
    - mkdir -p $CI_PROJECT_DIR/.sbt && cp -r ~/.sbt/* $CI_PROJECT_DIR/.sbt/.
  tags:
    - docker-machine
    - general-xlarge

unit-test:
  extends:
    - .test
    - .base-rule
  variables:
    DD_ENV: "ci"
    DD_SERVICE: "verity"
  script:
    - mkdir -p verity/target
    - sbt test | tee verity/target/verity-unit-tests.log | grep -v -e '^\[WARN\|ERROR\|TRACE\|INFO\|DEBUG'
  after_script:
    - datadog-ci junit upload verity/target/test-reports
  artifacts:
    when: always
    paths:
      - verity/target/test-reports
      - verity/target/verity-unit-tests.log
    reports:
#      junit: verity/target/test-reports/TEST-*.xml

coverage:
  extends:
    - .test
    - .base-rule
  script:
    - sbt compile # Must compile before running converge, so we can detect and ignore protobuf classes
    - sbt coverage test
  after_script:
    - sbt coverageReport
  artifacts:
    when: always
    paths:
      - verity/target/scala-2.13/scoverage-report/*
    reports:
      cobertura:
        - verity/target/scala-2.13/coverage-report/cobertura.xml
  allow_failure: true
  when: manual



static-analysis: # This test don't work and is currently not providing value
  extends:
    - .test
    - .base-rule
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - verity/target/scala-*/scapegoat-report
  script:
    - sbt scapegoat
  allow_failure: true # Eventually this will be removed, and we will have a zero error/warning policy
  when: manual

.integration-common:
  extends:
    - .test
    - .base-rule
  variables:
    # General vars
    MESSAGE_PROGRESS_TRACKING_ENABLED: "true"

    # For the integration tests to set up a usable bucket
    BLOB_BUCKET: "blob-bucket"
    BLOB_S3_ENDPOINT: "http://s3server:8000"

    # These are used by the s3 service in .integration jobs
    REMOTE_MANAGEMENT_DISABLE: 1
    ENDPOINT: "s3server"

    # Ledger Pool
    POOL_HOST: "indy-pool"
    TAA_ENABLE: "true"
    LIB_INDY_LEDGER_TAA_ENABLED: "true"

    # dynamoDb
    DYNAMODB_HOST: "dynamodb"
    DYNAMODB_PORT: "8000"
    DYNAMODB_ENDPOINT: "$DYNAMODB_HOST:$DYNAMODB_PORT"

    # For MYSQL docker container service
    MYSQL_HOST: "mysql"
    MYSQL_ROOT_PASSWORD: "root"
    MYSQL_DATABASE: "wallet"
    MYSQL_USER: "msuser"
    MYSQL_PASSWORD: "mspassword"

    # For yourls service
    YOURLS_HOST: "yourls"
    YOURLS_PORT: "80"
    YOURLS_SITE: "http://$YOURLS_HOST:$YOURLS_PORT" # This is for the YOURLS docker container
    YOURLS_USER: "yourlsuser"
    YOURLS_PASS: "yourlspass"

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - integration-tests/target/scalatest-runs
    when: always
  before_script:
#    - devops/scripts/s3server/s3_init.sh
    - cicd/scripts/check-integration-resources
  services:
    - name: registry.gitlab.com/evernym/containers/indy-pool:${indyNodeVersion}_${sovtokenVersion}
      alias: indy-pool
    - name: registry.gitlab.com/evernym/containers/verity-mysql-wallet:288429c3
      alias: mysql
    - name: registry.gitlab.com/evernym/containers/verity-dynamodb:20b4ceda
      alias: dynamodb
    - name: zenko/cloudserver
      alias: s3server # use endpoint_url value of http://s3server:8000
      entrypoint: [ '/usr/src/app/docker-entrypoint.sh' ]
      command: [ 'yarn', 'start', 'mem_backend' ]
    - name: registry.gitlab.com/evernym/containers/yourls-mysql:f2d0fff1
      alias: yourls

legacy:
  extends:
    - .integration-common
  script:
    - export TAA_ACCEPT_DATE=$(date +%F)
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.apis.legacy.ApiFlowSpec"
  variables:
    TEST_SCENARIOS: "scenario1, scenario2"

legacy-with-restart:
  extends:
    - .integration-common
  script:
    - export TAA_ACCEPT_DATE=$(date +%F)
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.apis.legacy.ApiFlowSpec"
  variables:
    TEST_SCENARIOS: "scenario1"
    TEST_RESTART_VERITY_RANDOMLY: "true"

integration:
  extends:
    - .integration-common
  script:
    - echo "Running 3rd party tests..."
    - export TAA_ACCEPT_DATE=$(date +%F)
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.third_party_apis.s3.*"
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.third_party_apis.wallet_api.*"
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.apis.legacy.vcx.*"
    - echo "Running $testType e2e API integration tests..."
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.apis.* -- -n com.evernym.integrationtests.e2e.tag.annotation.Integration"

limits:
  extends:
    - .integration-common
  script:
    - export TAA_ACCEPT_DATE=$(date +%F)
    - sbt "integrationTests/testOnly com.evernym.integrationtests.e2e.apis.limits.* -- -n com.evernym.integrationtests.e2e.tag.annotation.Limits"
